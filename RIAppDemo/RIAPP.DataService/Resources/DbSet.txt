export class {{DBSET_TYPE}} extends MOD.db.DbSet
{
	constructor(dbContext: DbContext) {
		var self =this, opts: MOD.db.IDbSetConstuctorOptions = {
			dbContext: dbContext,
			dbSetInfo: {{DBSET_INFO}},
			childAssoc: {{CHILD_ASSOC}},
			parentAssoc: {{PARENT_ASSOC}} 
		}, utils=RIAPP.global.utils;
		super(opts);
		self._entityType = {{ENTITY_TYPE}};

		opts.dbSetInfo.fieldInfos.forEach(function (f) {
			f.dependents=[];
			self._fieldMap[f.fieldName] = f;
		});

		opts.dbSetInfo.fieldInfos.forEach(function (f) {
		    if (!!f.isNavigation){
				self._navfldMap[f.fieldName] = self._doNavigationField(opts, f);
			}
			else if (!!f.isCalculated){
				self._calcfldMap[f.fieldName] = self._doCalculatedField(opts, f);
			}
		});

		self._mapAssocFields();
	}
	toString() {
		return '{{DBSET_NAME}}';
	}
{{QUERIES}}
{{CALC_FIELDS}}
	addNew(){
		return <{{ENTITY_TYPE}}>super.addNew();
	}
	getItemByPos(pos:number){
		return <{{ENTITY_TYPE}}>super.getItemByPos(pos);
	}
	getItemByKey(key:string){
		return <{{ENTITY_TYPE}}>super.getItemByKey(key);
	}
	findByPK(...vals: any[]) {
		return <{{ENTITY_TYPE}}>super.findByPK(vals);
	}
	get items() { return <{{ENTITY_TYPE}}[]>this._items; }
	get currentItem() { return this.getItemByPos(this._currentPos); }
	set currentItem(v) { 
		if (!!v && !(v instanceof {{ENTITY_TYPE}})){
			throw new Error(RIAPP.global.utils.format(RIAPP.ERRS.ERR_PARAM_INVALID_TYPE, 'currentItem', '{{ENTITY_TYPE}}'));
		}
		this._setCurrentItem(v);
	}
}